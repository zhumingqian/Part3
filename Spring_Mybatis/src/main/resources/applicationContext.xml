<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties" />

    <!--配置数据源 与Druid集成-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" >
        <!--配置数据库信息-->
        <property name="driverClassName" value="${driverClass}" />
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <!--druid后台监控显示SQL-->
        <property name="filters" value="stat,wall,log4j" />
    </bean>

    <!--配置SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--引入连接池-->
        <property name="dataSource" ref="dataSource" />
        <!--加载mapper.xml文件信息-->
        <property name="mapperLocations">
            <list>
                <value>classpath:com/zmq/mapper/*.xml</value>
            </list>
        </property>
        <!--配置实体类别名-->
        <property name="typeAliasesPackage" value="com.zmq.entity" />
    </bean>

    <!--
        配置MapperScannerConfigurer
        管理dao实现类的创建，并创建dao对象，存入工厂管理
    -->
    <bean id="mapperScannerConfig" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--dao接口所在的包 ， 多个包使用逗号分隔-->
        <property name="basePackage" value="com.zmq.mapper" />
        <!---->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>


    <!--注入-->
    <bean id="vHeroServiceImpl" class="com.zmq.service.impl.VHeroServiceImpl" >
        <property name="vHeroMapper" ref="VHeroMapper" />
    </bean>

    <!--配置事务-->
    <!--引入事务管理器-->
    <bean id="tm" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--引入跟工厂同一个数据源-->
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--配置事务-->
    <tx:advice transaction-manager="tm" id="tmAdvice">
        <tx:attributes>
            <!--
                read-only=true 只读  false 读写
                propagation 传播行为
                        * SUPPORTS = 不存在外部事务，则不开启新事务；存在外部事务，则合并到外部事务中。（适合查询）
                        * REQUIRED = 不存在外部事务，则开启新事务；存在外部事务，则合并到外部事务中。 (默认值)（适合增删改）
                rollback-for 事务回滚
                        * 如果事务中抛出 RuntimeException,则自动回滚
                        * 如果事务中抛出 CheckException(非运行时异常 Exception)，不会自动回滚，而是默认提交事务
                        * 处理方案 : 将CheckException转换成RuntimException上抛，或 设置 rollback-for="Exception"
            -->
            <tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS"  read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS"  read-only="true"/>
            <!--配置除上述方法名开头的方法外，执行的事务-->
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>

    <!--配置切面-->
    <aop:config>
        <!--切点-->
        <aop:pointcut id="pc" expression="execution(* com.zmq.service..*.*(..))"/>
        <!--切面-->
        <aop:advisor advice-ref="tmAdvice" pointcut-ref="pc" />
    </aop:config>

</beans>